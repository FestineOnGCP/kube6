## create a rootCA private key
openssl ecparam -out root-key.pem -name prime256v1 -genkey -noout
## generate root-ca csr from istio make ca-conf file
openssl req -new -key root-key.pem -config root-ca.conf -out root-cert.csr
## gen root CA cert from csr
openssl x509 -req -days 3650 -signkey root-key.pem -extensions req_ext -extfile \
root-ca.conf -in root-cert.csr -out root-cert.pem

## to directly create from rootca without intermediate ca
cp root-cert.pem ca-cert.pem
cp root-key.pem ca-key.pem
cp ca-cert.pem cert-chain.pem

kubectl create secret generic cacerts -n istio-system \
--from-file=ca-cert.pem --from-file=ca-key.pem \
--from-file=root-cert.pem --from-file=cert-chain.pem

## intermediate cert cluster1
openssl ecparam -out cluster1/ca-key.pem -name prime256v1 -genkey -noout
## gen cluster1 csr
openssl req -new -key cluster1/ca-key.pem -config ../intermediate-ca.conf -out \
cluster1/cluster1-cert.csr
## gen cluster1 certificate
openssl x509 -req -days 730 -CA root-cert.pem -CAkey root-key.pem -CAcreateserial \
-extensions req_ext -extfile ../intermediate-ca.conf -in cluster1/cluster1-cert.csr \
-out cluster1/ca-cert.pem
## create a cert chain inside cluster1 folder
cp ca-cert.pem cert-chain.pem
open cert-chain.pem and past root-cert.pem inside the file

## create cacert secret in istio namespace
kubectl create secret generic cacerts -n istio-system \
      --from-file=cluster1/ca-cert.pem \
      --from-file=cluster1/ca-key.pem \
      --from-file=cluster1/root-cert.pem \
      --from-file=cluster1/cert-chain.pem

## to verify
istioctl pc secret httpbin-7ffcb8bbcf-jjl8q.default -ojson
copy the tlscertificate.certificatechain.inlinebyte value to a variable e.g.
CERT=LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ2ekNDQVdXZ0F3SUJBZ0lSQVA1Wm5zSFliUHYyZ1p1dWs1dWxGdkl3Q2dZSUtvWkl6ajBFQXdJd0lqRU8KTUF3R0ExVUVDZ3dGU1hOMGFXOHhFREFPQmdOVkJBTU1CMUp2YjNRZ1EwRXdIaGNOTWpJd09ERXpNVFF6TkRNMgpXaGNOTWpJd09ERTBNVFF6TmpNMldqQUFNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVoL2J2Ckx5U2ltTUZycHRXVktnMTZQVWt6R0ZGSmk0dWF6YmR6N1FnTWxwdy81L0ZlNzBSc0swNFlzOWs3OXhic2N5ZzYKeDl3UXl1MHVmNUxXUzRCK2lxT0JuVENCbWpBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSQpLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVobHhxClJjcFlMUWo2RGpLQUgwMTk5cXU4OFVVd09nWURWUjBSQVFIL0JEQXdMb1lzYzNCcFptWmxPaTh2WTJ4MWMzUmwKY2k1c2IyTmhiQzl1Y3k5a1pXWmhkV3gwTDNOaEwyaDBkSEJpYVc0d0NnWUlLb1pJemowRUF3SURTQUF3UlFJZwpFdXcyeGFYTWp5TUIreXJyS1JCck5yU0FDMWFva08zNTdCVnJORm5hKzVvQ0lRQ0tjUnNUeitXLzYvQVdLdER4CnNpTHhFRG14enY2dVVqM0tNN3ZnYThuQWp3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQmh6Q0NBUzZnQXdJQkFnSVVKSDRXcnpvK0pRa3Y4NENpUVczRUk5ME5sOGt3Q2dZSUtvWkl6ajBFQXdJdwpJakVPTUF3R0ExVUVDZ3dGU1hOMGFXOHhFREFPQmdOVkJBTU1CMUp2YjNRZ1EwRXdIaGNOTWpJd09ERXpNVFF6Ck1qQTFXaGNOTXpJd09ERXdNVFF6TWpBMVdqQWlNUTR3REFZRFZRUUtEQVZKYzNScGJ6RVFNQTRHQTFVRUF3d0gKVW05dmRDQkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTklmelJnM1BkQmk0cGFCVEFGWQpKS3Y0WEFaeFhic05vRk1WenN4L0t2czJsV1BZN3hXYjZycWozbGYxeE52OTJDTVo0eVhEM3ZjcGovYVppZDBvClBnbWpRakJBTUIwR0ExVWREZ1FXQkJTR1hHcEZ5bGd0Q1BvT01vQWZUWDMycTd6eFJUQVBCZ05WSFJNQkFmOEUKQlRBREFRSC9NQTRHQTFVZER3RUIvd1FFQXdJQzVEQUtCZ2dxaGtqT1BRUURBZ05IQURCRUFpQVd1aUxnK1F5cApFQmZaaTJBY1F3TmdTeHNXS1R2VGZkT0pDWlRhMysrSXhRSWdaMVBMMm9LZy9EeXUvV1lqU2NrekhpQy9sMzFtCmovcmszZG5RaFZVSngvWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQmh6Q0NBUzZnQXdJQkFnSVVKSDRXcnpvK0pRa3Y4NENpUVczRUk5ME5sOGt3Q2dZSUtvWkl6ajBFQXdJdwpJakVPTUF3R0ExVUVDZ3dGU1hOMGFXOHhFREFPQmdOVkJBTU1CMUp2YjNRZ1EwRXdIaGNOTWpJd09ERXpNVFF6Ck1qQTFXaGNOTXpJd09ERXdNVFF6TWpBMVdqQWlNUTR3REFZRFZRUUtEQVZKYzNScGJ6RVFNQTRHQTFVRUF3d0gKVW05dmRDQkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCTklmelJnM1BkQmk0cGFCVEFGWQpKS3Y0WEFaeFhic05vRk1WenN4L0t2czJsV1BZN3hXYjZycWozbGYxeE52OTJDTVo0eVhEM3ZjcGovYVppZDBvClBnbWpRakJBTUIwR0ExVWREZ1FXQkJTR1hHcEZ5bGd0Q1BvT01vQWZUWDMycTd6eFJUQVBCZ05WSFJNQkFmOEUKQlRBREFRSC9NQTRHQTFVZER3RUIvd1FFQXdJQzVEQUtCZ2dxaGtqT1BRUURBZ05IQURCRUFpQVd1aUxnK1F5cApFQmZaaTJBY1F3TmdTeHNXS1R2VGZkT0pDWlRhMysrSXhRSWdaMVBMMm9LZy9EeXUvV1lqU2NrekhpQy9sMzFtCmovcmszZG5RaFZVSngvWT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=

echo $CERT | base64 --decode | openssl x509 -noout -text

## issue doesn't work with EC parameters, 
## the key created directly. openssl ecparam -out root-key.pem -name prime256v1 -genkey
error   failed to create discovery service: failed to create CA: failed to create an istiod CA: failed to create CA KeyCertBundle (failed to parse private key PEM: unsupported PEM block type for a private key: EC PARAMETERS)

## References
https://events.istio.io/istiocon-2021/slides/c9t4-UsingECCCertificates-JacobDelgado.pdf